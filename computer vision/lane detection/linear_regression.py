
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from scipy.optimize import curve_fit


# Given points
points = [(425, 1), (425, 3), (425, 2), (425, 4), (425, 6), (425, 0), (425, 5), (425, 7), (426, 9), (425, 8), (426, 10), (426, 12), (426, 11), (426, 13), (426, 15), (426, 16), (426, 19), (426, 18), (426, 14), (426, 20), (426, 22), (426, 21), (426, 17), (426, 26), (426, 28), (426, 24), (426, 23), (426, 25), (426, 27), (426, 29), (426, 32), (426, 34), (426, 36), (426, 35), (426, 31), (426, 30), (426, 33), (426, 38), (426, 37), (426, 39), (426, 41), (426, 40), (427, 42), (426, 44), (426, 45), (427, 49), (427, 43), (426, 47), (427, 46), (426, 48), (427, 50), (427, 52), (427, 51), (427, 58), (427, 53), (426, 55), (426, 54), (427, 57), (427, 56), (427, 59), (427, 60), (427, 61), (428, 64), (427, 65), (427, 62), (428, 71), (427, 63), (427, 67), (427, 66), (427, 68), (427, 69), (427, 70), (428, 73), (428, 72), (428, 74), (428, 76), (428, 75), (427, 77), (428, 78), (428, 79), (428, 80), (428, 83), (428, 82), (428, 85), (428, 86), (428, 81), (428, 88), (428, 87), (428, 89), (429, 91), (429, 92), (428, 84), (429, 93), (428, 95), (429, 94), (429, 98), (428, 90), (429, 97), (429, 100), (429, 99), (429, 101), (429, 104), (429, 96), (429, 106), (429, 110), (429, 102), (429, 103), (429, 105), (429, 107), (429, 109), (429, 122), (429, 112), (429, 111), (428, 113), (429, 116), (429, 108), (429, 123), (429, 124), (429, 114), (429, 125), (428, 115), (429, 128), (429, 118), (429, 117), (429, 119), (429, 129), (429, 131), (429, 121), (429, 120), (429, 133), (429, 126), (429, 127), (429, 130), (429, 132), (429, 135), (430, 134), (429, 136), (429, 139), (429, 144), (429, 138), (429, 137), (430, 140), (429, 142), (429, 141), (429, 147), (429, 146), (430, 150), (429, 143), (429, 145), (429, 149), (429, 148), (430, 152), (430, 151), (429, 153), (430, 156), (430, 155), (430, 161), (430, 160), (430, 154), (430, 158), (430, 162), (430, 164), (430, 163), (430, 166), (430, 165), (430, 157), (430, 168), (430, 167), (430, 170), (430, 169), (430, 159), (430, 171), (430, 173), (430, 172), (431, 175), (430, 174), (431, 176), (431, 177), (432, 179), (432, 181), (433, 184), (431, 178), (431, 180), (431, 182), (433, 186), (432, 188), (432, 187), (432, 189), (431, 183), (433, 185), (432, 191), (433, 194), (433, 193), (432, 190), (432, 192), (433, 196), (433, 195), (435, 197), (435, 199), (435, 198), (435, 201), (435, 200), (435, 202), (435, 204), (435, 203), (437, 205), (437, 207), (437, 206), (437, 209), (437, 208), (438, 211), (438, 210), (438, 212), (439, 214), (438, 213), (439, 216), (439, 215), (439, 217), (441, 222), (441, 218), (441, 220), (441, 219), (440, 221), (441, 223), (441, 224), (443, 225), (443, 227), (443, 226), (443, 228), (443, 230), (444, 229), (443, 232), (443, 231), (445, 233), (445, 234), (446, 237), (445, 236), (445, 239), (445, 238), (445, 235), (447, 244), (446, 241), (446, 240), (446, 242), (446, 243), (447, 246), (447, 245), (447, 247), (447, 249), (447, 248), (448, 251), (448, 254), (448, 255), (447, 250), (447, 252), (447, 253), (448, 256), (447, 257), (448, 260), (447, 259), (448, 261), (447, 262), (448, 258), (448, 264), (447, 270), (447, 263), (448, 265), (447, 266), (447, 268), (447, 267), (447, 269), (446, 272), (446, 271), (446, 273), (443, 285), (446, 275), (446, 274), (445, 277), (445, 276), (444, 282), (443, 286), (442, 287), (445, 279), (442, 288), (445, 278), (445, 280), (444, 281), (444, 284), (444, 283), (439, 298), (442, 289), (441, 291), (441, 290), (440, 293), (441, 292), (438, 299), (438, 301), (439, 300), (438, 302), (437, 304), (441, 294), (440, 296), (440, 295), (439, 297), (436, 309), (436, 311), (438, 303), (436, 312), (437, 306), (437, 305), (436, 313), (436, 315), (436, 314), (436, 316), (436, 308), (437, 307), (436, 310), (436, 321), (436, 324), (436, 323), (436, 317), (436, 318), (435, 330), (436, 320), (435, 332), (436, 322), (436, 325), (436, 326), (437, 319), (436, 328), (435, 331), (435, 335), (435, 337), (436, 327), (436, 329), (435, 338), (435, 334), (435, 333), (435, 336), (435, 346), (435, 345), (435, 347), (435, 339), (435, 341), (435, 350), (435, 340), (435, 343), (435, 352), (434, 342), (435, 354), (436, 348), (435, 357), (435, 360), (435, 359), (435, 349), (435, 362), (435, 351), (435, 353), (435, 355), (435, 344), (435, 356), (435, 358), (435, 370), (435, 361), (435, 363), (435, 365), (435, 364), (435, 369), (435, 371), (435, 374), (435, 373), (436, 375), (435, 367), (435, 366), (435, 368), (435, 372), (435, 377), (436, 376), (436, 379), (435, 378), (436, 381), (436, 380), (436, 383), (436, 382), (436, 384), (436, 385), (437, 388), (437, 387), (438, 394), (436, 386), (439, 389), (439, 391), (439, 390), (438, 393), (439, 392), (439, 395), (439, 396), (438, 398), (438, 397), (438, 400), (438, 399), (438, 402), (437, 409), (438, 401), (438, 403), (438, 405), (438, 404), (438, 406), (438, 408), (438, 407), (437, 410), (437, 412), (437, 411), (437, 414), (437, 413), (437, 415), (437, 417), (436, 419), (436, 418), (436, 421), (436, 420), (436, 423), (436, 422), (436, 424), (437, 416), (436, 426), (436, 425), (435, 427), (435, 429), (435, 428), (435, 431), (435, 430), (434, 433), (434, 432), (434, 434), (434, 435), (434, 436), (433, 437), (433, 438), (433, 439), (433, 440), (433, 442), (433, 443), (427, 469), (427, 470)]

# Extract x and y values from the data
x_data = np.array([point[0] for point in points])
y_data = np.array([point[1] for point in points])


# Define the quadratic function
def quadratic_function(x, a, b, c):
    return a * x**2 + b * x + c

# Fit the quadratic function to the data
popt, _ = curve_fit(quadratic_function, x_data, y_data)

# Extract the coefficients
a, b, c = popt

# Define the range of x values for plotting the function
x_range = np.linspace(min(x_data), max(x_data), 100)

# Calculate the y values using the quadratic function
y_range = quadratic_function(x_range, *popt)

# Plot the original data points
plt.scatter(x_data, y_data, color='blue', label='Original Data')

# Plot the quadratic regression function
plt.plot(x_range, y_range, color='red', label='Quadratic Regression')

# Add labels and legend
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Quadratic Regression')
plt.legend()

# Show plot
plt.grid(True)
plt.show()

# def quard_regresion(points):
#     x = np.array([point[0] for point in points]).reshape(-1, 1)
#     y = np.array([point[1] for point in points])

#     # Transform features to include quadratic term (x^2)
#     poly_features = PolynomialFeatures(degree=1)
#     x_poly = poly_features.fit_transform(x)

#     # Fit quadratic regression model
#     model = LinearRegression().fit(x_poly, y)

#     # Generate new points along the quadratic regression curve
#     x_new = np.linspace(min(x), max(x), num=10).reshape(-1, 1)
#     x_new_poly = poly_features.transform(x_new)
#     y_new = model.predict(x_new_poly)

#     # Combine x_new and y_new into new_points
#     new_points = list(zip(x_new.flatten(), y_new))

#     rounded_points=[]

#     print(new_points)
#     for a in new_points:
#         x_cor=round(a[0])
#         y_cor=round(a[1])
#         rounded_points.append((x_cor,y_cor))

#     # print("New points on the regression line:")
#     # print(rounded_points)
#     return rounded_points


# print(quard_regresion(points))

# # Plot original points
# plt.scatter(x, y, color='blue', label='Original Points')

# # Plot quadratic regression curve
# plt.plot(x_new, y_new, color='red', label='Quadratic Regression')

# # Set labels and title
# plt.xlabel('X')
# plt.ylabel('Y')
# plt.title('Quadratic Regression')
# plt.legend()

# # Show plot
# plt.grid(True)
# plt.show()